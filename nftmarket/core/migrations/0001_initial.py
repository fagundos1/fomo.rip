# Generated by Django 4.2.4 on 2023-08-04 04:05

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wallet', models.CharField(blank=True, max_length=42, null=True, unique=True, verbose_name='Wallet')),
                ('name', models.CharField(blank=True, max_length=64, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[a-z0-9_]+$', flags=re.RegexFlag['IGNORECASE'], message='May consist only of a-z, 0–9, and _')], verbose_name='Username')),
                ('telegram', models.CharField(max_length=32, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.RegexValidator('^[a-z0-9_]+$', flags=re.RegexFlag['IGNORECASE'], message='May consist only of a-z, 0–9, and _')], verbose_name='Telegram')),
                ('twitter', models.CharField(max_length=15, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.RegexValidator('^[a-z0-9_]+$', flags=re.RegexFlag['IGNORECASE'], message='May consist only of a-z, 0–9, and _')], verbose_name='Twitter')),
                ('use_dark_theme', models.BooleanField(blank=True, default=False, verbose_name='Dark theme')),
                ('ref_name', models.CharField(blank=True, default='undefined', max_length=32, verbose_name='Reference Url Param Name')),
                ('is_active', models.BooleanField(blank=True, default=True, verbose_name='Active account')),
                ('created_at', models.DateTimeField(blank=True, verbose_name='Registered on')),
            ],
            options={
                'db_table': 'core_account',
            },
        ),
        migrations.CreateModel(
            name='ClickApiTokens',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_name', models.CharField(db_index=True, max_length=32, unique=True, verbose_name='Reference Url Param Name')),
                ('token', models.CharField(max_length=32, verbose_name='Click API Token')),
            ],
            options={
                'verbose_name': 'Click API Token',
                'verbose_name_plural': 'Click API Tokens',
                'db_table': 'core_click_api_tokens',
            },
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True, verbose_name='Deal start date')),
                ('status', models.TextField(choices=[('open', 'Open'), ('waiting_seller_confirm', 'Waiting Seller Confirm'), ('waiting_buyer_payment', 'Waiting Buyer Payment'), ('waiting_buyer_payment_confirm', 'Waiting Buyer Payment'), ('waiting_seller_collateral', 'Waiting Seller Collateral'), ('waiting_seller_collateral_confirm', 'Waiting Seller Collateral'), ('waiting_for_completion', 'Waiting For Completion'), ('completion_delay', 'Completion Delay'), ('waiting_buyer_claim', 'Waiting Buyer Claim'), ('waiting_seller_claim', 'Waiting Seller Claim'), ('confirmed_finish', 'Confirmed Finish'), ('waiting_moderator', 'Waiting Moderator'), ('waiting_sides_claim', 'Waiting Sides Claims'), ('closed', 'Closed'), ('deleted', 'Deleted')], verbose_name='Deal status')),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='Deal status expiration')),
                ('fee', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Fee')),
                ('hash_id', models.TextField(blank=True, null=True, verbose_name='Deal Hash')),
                ('is_buyer_approved', models.BooleanField(blank=True, default=False, verbose_name='Buyer approved')),
                ('is_seller_approved', models.BooleanField(blank=True, default=False, verbose_name='Seller approved')),
            ],
            options={
                'verbose_name': 'Deal',
                'verbose_name_plural': 'Deals',
                'db_table': 'core_deal',
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('network', models.TextField(choices=[('bnb', 'BNB Smart Chain'), ('arbitrum', 'Arbitrum One'), ('optimism', 'Optimism')], default='bnb', verbose_name='Network')),
                ('offer_type', models.TextField(choices=[('nft', 'NFT'), ('ido', 'Tokens'), ('worker', 'Workers'), ('other', 'Other')], verbose_name='Token type')),
                ('status', models.TextField(choices=[('moderation', 'On moderation'), ('active', 'Active'), ('deal', 'In process'), ('closed', 'Closed'), ('deleted', 'Deleted'), ('rejected', 'Rejected')], default='active', verbose_name='Offer status')),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[a-z0-9 #_-]+$', flags=re.RegexFlag['IGNORECASE'], message='May consist only of a-z, 0–9, and _-')], verbose_name='Name')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Price')),
                ('collateral', models.FloatField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Collateral')),
                ('details', models.TextField(blank=True, default='', validators=[django.core.validators.RegexValidator('^[a-z0-9 -.,]+$', flags=re.RegexFlag['IGNORECASE'], message='May consist only of a-z, 0–9, and -.,')], verbose_name='Offer details')),
                ('status_changed_at', models.DateTimeField(blank=True, null=True, verbose_name='Offer status changed')),
                ('last_seen_buyer', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_seen_seller', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('buyer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='buy_offers', to='core.account', verbose_name='Buyer')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sale_offers', to='core.account', verbose_name='Account')),
            ],
            options={
                'verbose_name': 'Offer',
                'verbose_name_plural': 'Offers',
                'db_table': 'core_offer',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='AccountNonce',
            fields=[
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='nonce', serialize=False, to='core.account', verbose_name='Account')),
                ('value', models.TextField(verbose_name='Nonce value')),
                ('created_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Account Nonce',
                'verbose_name_plural': 'Accounts Nonces',
                'db_table': 'core_account_nonce',
            },
        ),
        migrations.CreateModel(
            name='AccountRating',
            fields=[
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='rating', serialize=False, to='core.account', verbose_name='Account')),
                ('value', models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Rating')),
            ],
            options={
                'verbose_name': 'Account Rating',
                'verbose_name_plural': 'Accounts Ratings',
                'db_table': 'core_account_rating',
            },
        ),
        migrations.CreateModel(
            name='AccountTelegramLink',
            fields=[
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='telegram_link', serialize=False, to='core.account', verbose_name='Account')),
                ('telegram_id', models.BigIntegerField(blank=True, null=True, verbose_name='Telegram ID')),
                ('is_active', models.BooleanField(blank=True, default=True)),
            ],
            options={
                'db_table': 'core_account_tg_link',
            },
        ),
        migrations.CreateModel(
            name='WTBRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('moderation', 'On moderation'), ('active', 'Active'), ('deleted', 'Deleted')], default='active', verbose_name='WTB offer status')),
                ('network', models.TextField(choices=[('bnb', 'BNB Smart Chain'), ('arbitrum', 'Arbitrum One'), ('optimism', 'Optimism')], default='bnb', verbose_name='Network')),
                ('token_type', models.TextField(choices=[('nft', 'NFT'), ('ido', 'Tokens'), ('worker', 'Workers'), ('other', 'Other')], verbose_name='Token type')),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[a-z0-9 #_-]+$', flags=re.RegexFlag['IGNORECASE'], message='May consist only of a-z, 0–9, and _-')], verbose_name='Name')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Price')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wtb_requests', to='core.account', verbose_name='Account')),
            ],
            options={
                'verbose_name': 'WTB Offer',
                'verbose_name_plural': 'WTB Offers',
                'db_table': 'core_wtb_requests',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='PriceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[a-z0-9 #_-]+$', flags=re.RegexFlag['IGNORECASE'], message='May consist only of a-z, 0–9, and _-')], verbose_name='Name')),
                ('max_price', models.FloatField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max Price')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_requests', to='core.account', verbose_name='Account')),
            ],
            options={
                'verbose_name': 'Account Request',
                'verbose_name_plural': 'Account Requests',
                'db_table': 'core_requests',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='OfferSearchTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.TextField()),
                ('offer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='search_term', to='core.offer')),
            ],
            options={
                'db_table': 'core_offer_search_term',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.BigIntegerField()),
                ('notification_type', models.TextField(choices=[('deal', 'Deal notification'), ('wts', 'WTS offer notification'), ('wtb', 'WTB offer notification')], default='deal', verbose_name='Notification type')),
                ('notify_event', models.TextField(choices=[('wts_offer_active', 'WTS offer became active'), ('wtb_request_active', 'WTB offer became active'), ('wtb_request_offer', 'New suggestion for WTB offer'), ('buyer_confirm', 'Buyer confirmed deal'), ('seller_confirm', 'Seller confirmed deal'), ('deal_expired_seller_confirm', 'Deal expired seller confirm'), ('deal_expired_buyer_payment', 'Deal expired buyer payment'), ('deal_expired_seller_payment', 'Deal expired seller payment'), ('buyer_payed', 'Buyer payed'), ('seller_payed', 'Seller payed'), ('deal_completed', 'Deal completed'), ('deal_canceled', 'Deal arbitration created'), ('deal_resolved', 'Deal arbitration resolved'), ('deal_closed', 'Deal closed'), ('deal_feedback', 'Deal feedback created')], verbose_name='Notify event')),
                ('status', models.TextField(choices=[('new', 'New notification'), ('sent', 'Sent notification')], default='new', verbose_name='Notification status')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('is_seen', models.BooleanField(blank=True, default=False, verbose_name='Notification is seen')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.account', verbose_name='Account')),
                ('offer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.offer', verbose_name='Offer')),
                ('wtb_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.wtbrequest', verbose_name='WTB offer')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'core_notification',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='DealFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Rating')),
                ('details', models.TextField(verbose_name='Feedback details')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_feedbacks', to='core.account', verbose_name='Reporter')),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='core.deal', verbose_name='Deal')),
                ('feedback_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_feedbacks', to='core.account', verbose_name='Account')),
            ],
            options={
                'verbose_name': 'Deal Feedback',
                'verbose_name_plural': 'Deals Feedbacks',
                'db_table': 'core_deal_feedback',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='DealCancelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reasons', models.JSONField(verbose_name='Reasons list')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Feedback details')),
                ('deal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cancelation', to='core.deal', verbose_name='Deal')),
            ],
            options={
                'db_table': 'core_deal_cancelation',
            },
        ),
        migrations.CreateModel(
            name='DealArbitration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pay_to_seller', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Pay to seller')),
                ('pay_to_buyer', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Pay to buyer')),
                ('is_seller_claimed', models.BooleanField(blank=True, default=False, verbose_name='Seller claimed money')),
                ('is_buyer_claimed', models.BooleanField(blank=True, default=False, verbose_name='Buyer claimed money')),
                ('txn_receipt', models.JSONField(blank=True, null=True, verbose_name='txn')),
                ('deal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='arbitration', to='core.deal', verbose_name='Deal')),
            ],
            options={
                'db_table': 'core_deal_arbitration',
            },
        ),
        migrations.AddField(
            model_name='deal',
            name='offer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deals', to='core.offer', verbose_name='Offer'),
        ),
        migrations.CreateModel(
            name='AccountBackendMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=16, verbose_name='Title')),
                ('message', models.CharField(max_length=128, verbose_name='Message')),
                ('tag', models.CharField(max_length=16)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backend_messages', to='core.account', verbose_name='Account')),
            ],
        ),
        migrations.CreateModel(
            name='AccountAvatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(max_length=256, upload_to='images/', verbose_name='Image')),
                ('is_deleted', models.BooleanField(blank=True, default=False, verbose_name='Deleted image')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatars', to='core.account', verbose_name='Account')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'db_table': 'core_account_avatar',
            },
        ),
        migrations.CreateModel(
            name='AccountFavorites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='core.account', verbose_name='Account')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='core.offer', verbose_name='Offer')),
            ],
            options={
                'verbose_name': 'Account Favorites',
                'verbose_name_plural': 'Account Favorites',
                'db_table': 'core_favorites',
                'ordering': ['-pk'],
                'unique_together': {('account', 'offer')},
            },
        ),
    ]
